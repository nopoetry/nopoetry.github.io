<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Li buyan Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-03T12:05:01.252Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Li buyan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用EasyExcel导入Excel文件</title>
    <link href="http://yoursite.com/2020/08/03/%E4%BD%BF%E7%94%A8EasyExcel%E5%AF%BC%E5%85%A5Excel%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/08/03/%E4%BD%BF%E7%94%A8EasyExcel%E5%AF%BC%E5%85%A5Excel%E6%96%87%E4%BB%B6/</id>
    <published>2020-08-03T08:10:34.000Z</published>
    <updated>2020-08-03T12:05:01.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="导入Maven依赖"><a href="#导入Maven依赖" class="headerlink" title="导入Maven依赖"></a>导入Maven依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里开源EXCEL --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Excel实体类"><a href="#Excel实体类" class="headerlink" title="Excel实体类"></a>Excel实体类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.write.style.ColumnWidth;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.write.style.ContentRowHeight;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.write.style.HeadRowHeight;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.metadata.BaseRowModel;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@ContentRowHeight(15)</span> <span class="comment">//设定每一行的高度,不包含表头</span></span><br><span class="line"><span class="meta">@HeadRowHeight(30)</span>  <span class="comment">//设置 表头 高度</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelData</span> <span class="keyword">extends</span> <span class="title">BaseRowModel</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@ColumnWidth(15)</span>  <span class="comment">//列宽</span></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(15)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;职务&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String postName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(35)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;籍贯&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String birthPlace;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ColumnWidth(15)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;出生日期&quot;)</span></span><br><span class="line">    <span class="meta">@DateTimeFormat(&quot;yyyy-MM-dd&quot;)</span> <span class="comment">// &quot;yyyy/MM/dd&quot; &quot;yyyy年MM月dd日HH时mm分ss秒&quot; 等等格式都可以</span></span><br><span class="line">    <span class="keyword">private</span> String birth;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(15)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;工资&quot;)</span></span><br><span class="line">    <span class="meta">@NumberFormat(&quot;.##&quot;)</span>  <span class="comment">//#代表任意数字, 注意这里的日期格式和数字格式都必须是字符串类型的</span></span><br><span class="line">    <span class="keyword">private</span> String salary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>@ExcelProperty(value = String[], index = int):<br>设置表头信息<br>value: 表名称<br>index: 列号</li></ol><div class="note warning">            <p>可以根据名字或者Index去匹配。当然也可以不写，默认第一个字段就是index=0，以此类推。千万注意，要么全部不写，要么全部用index，要么全部用名字去匹配。千万别三个混着用，除非你非常了解源代码中三个混着用怎么去排序的。 </p>          </div><p><code>ExcelIgnore</code> 默认所有字段都会和excel去匹配，加了这个注解会忽略该字段</p><ol start="2"><li><p><strong>DateTimeFormat</strong> 日期转换，用<code>String</code>去接收excel日期格式的数据会调用这个注解。里面的value<code>参照``java.text.SimpleDateFormat</code></p></li><li><p><strong>ExcelIgnoreUnannotated</strong>  默认不加<code>ExcelProperty</code> 的注解的都会参与读写，加了不会参与</p></li><li><p><strong>NumberFormat</strong>  数字转换，用<code>String</code>去接收excel数字格式的数据会调用这个注解。里面的value参照<code>java.text.DecimalFormat</code></p></li></ol><h1 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.glriverside.qixing.personnel.listener;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 *** 重点</span></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.context.AnalysisContext;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.event.AnalysisEventListener;</span><br><span class="line"><span class="keyword">import</span> com.glriverside.qixing.personnel.config.ErrorMsg;</span><br><span class="line"><span class="keyword">import</span> com.glriverside.qixing.personnel.common.ExcelData;</span><br><span class="line"><span class="keyword">import</span> com.glriverside.qixing.personnel.model.Education;</span><br><span class="line"><span class="keyword">import</span> com.glriverside.qixing.personnel.model.Post;</span><br><span class="line"><span class="keyword">import</span> com.glriverside.qixing.personnel.model.User;</span><br><span class="line"><span class="keyword">import</span> com.glriverside.qixing.personnel.service.EducationService;</span><br><span class="line"><span class="keyword">import</span> com.glriverside.qixing.personnel.service.PostService;</span><br><span class="line"><span class="keyword">import</span> com.glriverside.qixing.personnel.service.UserPostService;</span><br><span class="line"><span class="keyword">import</span> com.glriverside.qixing.personnel.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.invoke.MethodHandles.lookup;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.slf4j.LoggerFactory.getLogger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析监听器，</span></span><br><span class="line"><span class="comment"> * 每解析一行会回调invoke()方法。</span></span><br><span class="line"><span class="comment"> * 整个excel解析结束会执行doAfterAllAnalysed()方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">// 有个很重要的点 DemoDataListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelListener</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AnalysisEventListener</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = getLogger(lookup().lookupClass());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BATCH_COUNT = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储错误信息的集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ErrorMsg&gt; errorMsgList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法传递spring</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExcelListener</span><span class="params">(UserService userService, List&lt;ErrorMsg&gt; errorMsgList)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">        <span class="keyword">this</span>.errorMsgList = errorMsgList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义存储表格数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义存储标题结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T titleMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(T result, AnalysisContext context)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//获取当前行号</span></span><br><span class="line">        Integer rowIndex = context.readRowHolder().getRowIndex();</span><br><span class="line">        <span class="keyword">if</span> (rowIndex == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.titleMap = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//数据存储到list，供批量处理，或后续自己业务逻辑处理。</span></span><br><span class="line">            <span class="keyword">if</span> (result <span class="keyword">instanceof</span> ExcelData)</span><br><span class="line">            &#123;</span><br><span class="line">                ExcelData excelData = (ExcelData)result;</span><br><span class="line">                User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> nameLength = excelData.getUserName().length();</span><br><span class="line">                <span class="keyword">if</span>(excelData.getUserName() != <span class="keyword">null</span> &amp;&amp; nameLength &lt; <span class="number">5</span> &amp;&amp; nameLength &gt; <span class="number">1</span>)</span><br><span class="line">                    user.setName(excelData.getUserName());</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (excelData.getUserName() == <span class="keyword">null</span> )&#123;</span><br><span class="line">                    LOG.warn(<span class="string">&quot;数据为空! 第&#123;&#125;行, userName&quot;</span>, rowIndex);</span><br><span class="line">                    errorMsgList.add(<span class="keyword">new</span> ErrorMsg(rowIndex, <span class="string">&quot;姓名为空&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                userService.addUser(user, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        LOG.info(<span class="string">&quot;解析数据第&#123;&#125;行，数据为：&#123;&#125;&quot;</span>, rowIndex, result);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span></span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt;= BATCH_COUNT) &#123;</span><br><span class="line">            saveData();</span><br><span class="line">            <span class="comment">// 存储完成清理 list</span></span><br><span class="line">            list.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有数据解析完成了 都会来调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">&quot;导入Excel完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加上存储数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">&quot;&#123;&#125;条数据，开始存储数据库！&quot;</span>, list.size());</span><br><span class="line">        demoDAO.save(list);</span><br><span class="line">        LOG.info(<span class="string">&quot;存储数据库成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读取表头数据"><a href="#读取表头数据" class="headerlink" title="读取表头数据"></a>读取表头数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 这里会一行行的返回头</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> headMap</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeHeadMap</span><span class="params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">&quot;解析到一条头数据:&#123;&#125;&quot;</span>, JSON.toJSONString(headMap));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h1><h2 id="读取单个Sheet"><a href="#读取单个Sheet" class="headerlink" title="读取单个Sheet"></a>读取单个Sheet</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/import&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImportController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = getLogger(lookup().lookupClass());</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/importExcel&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">importExcel</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ExcelListener excelListener = <span class="keyword">new</span> ExcelListener&lt;ExcelData&gt;();</span><br><span class="line"></span><br><span class="line">            EasyExcel.read(<span class="keyword">new</span> BufferedInputStream(file.getInputStream()),excelListener).head(ExcelData.class).sheet().doReadSync();</span><br><span class="line">            <span class="comment">//EasyExcel.read(new BufferedInputStream(file.getInputStream()), ExcelData.class, excelListener).sheet().doReadSync();</span></span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.error(e.getMessage(),e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读取多个Sheet"><a href="#读取多个Sheet" class="headerlink" title="读取多个Sheet"></a>读取多个Sheet</h2><h3 id="一次性读取"><a href="#一次性读取" class="headerlink" title="一次性读取"></a>一次性读取</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyExcel.read(<span class="keyword">new</span> BufferedInputStream(file.getInputStream()), ExcelData.class , excelListener).doReadAll();</span><br><span class="line">                        </span><br><span class="line"><span class="comment">//一次性读多个sheet</span></span><br><span class="line">EasyExcel.read(<span class="keyword">new</span> BufferedInputStream(file.getInputStream()),excelListener).head(ExcelData.class).doReadAll();</span><br></pre></td></tr></table></figure><h3 id="分批读取"><a href="#分批读取" class="headerlink" title="分批读取"></a>分批读取</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/import&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImportController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = getLogger(lookup().lookupClass());</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/importExcel&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">importExcel</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        ExcelReader excelReader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            excelReader = EasyExcel.read(<span class="keyword">new</span> BufferedInputStream(file.getInputStream())).build();</span><br><span class="line"></span><br><span class="line">            ReadSheet readSheet1 =</span><br><span class="line">                    EasyExcel.readSheet(<span class="number">0</span>).head(ExcelData.class).registerReadListener(<span class="keyword">new</span> ExcelListener()).build();</span><br><span class="line">            ReadSheet readSheet2 =</span><br><span class="line">                    EasyExcel.readSheet(<span class="number">1</span>).head(ExcelData.class).registerReadListener(<span class="keyword">new</span> ExcelListener()).build();</span><br><span class="line">            <span class="comment">// 这里注意 一定要把sheet1 sheet2 一起传进去，不然有个问题就是03版的excel 会读取多次，浪费性能</span></span><br><span class="line">            excelReader.read(readSheet1, readSheet2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.error(e.getMessage(),e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (excelReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 这里千万别忘记关闭，读的时候会创建临时文件，到时磁盘会崩的</span></span><br><span class="line">                excelReader.finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Lambda表达式重构监听器"><a href="#Lambda表达式重构监听器" class="headerlink" title="Lambda表达式重构监听器"></a>Lambda表达式重构监听器</h1><p><img src="https://pic.downk.cc/item/5f27fbd514195aa594f47a13.png"></p>]]></content>
    
    <summary type="html">
    
      使用阿里的开源框架实现导入Excel的功能
    
    </summary>
    
    
      <category term="开源框架" scheme="http://yoursite.com/categories/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
      <category term="EasyExcel" scheme="http://yoursite.com/categories/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/EasyExcel/"/>
    
    
      <category term="EasyExcel" scheme="http://yoursite.com/tags/EasyExcel/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客插入图片的方法</title>
    <link href="http://yoursite.com/2020/08/03/Hexo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/08/03/Hexo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-08-03T07:37:45.000Z</published>
    <updated>2020-08-03T07:53:26.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客插入图片的方法"><a href="#Hexo博客插入图片的方法" class="headerlink" title="Hexo博客插入图片的方法"></a>Hexo博客插入图片的方法</h1><h2 id="绝对引用"><a href="#绝对引用" class="headerlink" title="绝对引用"></a>绝对引用</h2><p> 少量使用图片的时候使用, 将文件放在 <em>/source/images</em> 文件夹下, 使用 markdown 语法 <code>![Lena](/images/lena.png)</code> 可以实现图片显示, 但是这种引用在本地markdown 编辑器中会无法预览,因为相对路径不一致,找不到文件, 不过在首页内容和文章正文中都能正常显示,十分方便 </p><p><img src="/.com//1.jpg" alt="图片"></p><p> 但是存在一个问题,后续可能维护起来麻烦, 不知道哪里引用了哪个图片,导致文章删除但是图片仍在</p><h2 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用"></a>相对引用</h2><ol><li><p><strong>设置站点配置<code>_config.yml</code></strong>:将<code>post_asset_folder: false</code>改为<code>post_asset_folder: true</code></p></li><li><p><strong>安装插件</strong>:<code>npm install https://github.com/CodeFalling/hexo-asset-image -- save</code></p></li><li><p><strong>运行<code>hexo new post &quot;aaa&quot;</code></strong>,生成aaa.md博文时就会在<code>/source/_posts</code>目录下生成aaa的文件夹，将你想在aaa博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意。</p></li><li><p><strong>添加图片</strong>:在想添加的位置写入<code>![](aaa/图片名字.图片格式)</code>,例如<code>![](aaa/1.png)</code>。</p><p><img src="/.com//1.jpg" alt="图片"></p></li></ol><h2 id="在线引用"><a href="#在线引用" class="headerlink" title="在线引用"></a>在线引用</h2><p>如果要引用的图片已经存在于网络上, 直接引用该图片的地址即可</p><p>  <code>![百度图片--lena](http://images2018.cnblogs.com/blog/1003156/201806/1003156-20180604175546711-227291592.png )</code></p><p>如果不存在于网络上,  可以使用在线图床上传之后得到链接使用, </p><p>比如使用  <a href="https://sm.ms/">sm.ms</a></p>]]></content>
    
    <summary type="html">
    
      Hexo博客插入图片的几种方法
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="博客" scheme="http://yoursite.com/categories/Hexo/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>基于github pages + Hexo 搭建自己的博客</title>
    <link href="http://yoursite.com/2020/08/02/2020-8-2-%E5%9F%BA%E4%BA%8Egithub-pages-+-Hexo-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2020/08/02/2020-8-2-%E5%9F%BA%E4%BA%8Egithub-pages-+-Hexo-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-08-01T16:00:00.000Z</published>
    <updated>2020-08-02T08:42:21.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h1><p> GitHub Page 是github网站提供给用户,  并可以用来托管个人的静态网站, 用它来搭建个人博客可以省去购买服务器, 配置域名等操作</p><h2 id="配置仓库"><a href="#配置仓库" class="headerlink" title="配置仓库"></a>配置仓库</h2><ol><li><p>首先, 注册一个github账号</p></li><li><p>注册完成之后, 首先在右上角个人头像的左侧, 点击加号, 选择 <strong>New repository</strong> </p></li></ol><p>跳转页面之后, 来到创建仓库页面</p><p><img src="https://i.loli.net/2020/08/02/L9FvgXYZRQa7GwO.png" alt="post1_1.png"></p><div class="note info">            <p>这里的仓库名一定要为 xxx.github.io, 其中xxx为你的github用户名, 且要以”.”来做分割</p><p>比如我的仓库名就为 nopoetry.github.io</p>          </div><p>勾选下边的” Initialize this repository with a README “</p><ol start="3"><li><p>创建好仓库之后, 找到仓库的最右边的Setting按钮</p><p> <img src="https://i.loli.net/2020/08/02/tbFkHjZ3ErB1vRV.png" alt="post_2.png"> </p></li></ol><p>点击之后拉到最下边, 找到Github Pages这一项配置</p><p> <img src="https://i.loli.net/2020/08/02/p7g5hJqdkzV3MSG.png" alt="post_3.png"> </p><p>如果显示这样的信息, 就说明github已经为你自动生成了属于你的网页, 点击即可访问</p><h1 id="搭建Hexo环境"><a href="#搭建Hexo环境" class="headerlink" title="搭建Hexo环境"></a>搭建Hexo环境</h1><h2 id="安装git-和Node-js"><a href="#安装git-和Node-js" class="headerlink" title="安装git 和Node.js"></a>安装git 和Node.js</h2><p>我们需要用git把hexo生成的博客网页推送到刚刚创建的github仓库中</p><p><a href="https://blog.csdn.net/sanxd/article/details/82624127">安装git教程</a></p><p><a href="https://www.cnblogs.com/minxiang-luo/p/12490526.html">安装Node.js教程</a></p><h2 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h2><p> Hexo 是一个基于<a href="http://www.oschina.net/p/nodejs">node.js</a> 的静态博客网站生成器 </p><p>特点：</p><ul><li>不可思议的快速 ─ 只要一眨眼静态文件即生成完成</li><li>支持 <a href="http://daringfireball.net/projects/markdown/">Markdown</a></li><li>仅需一道指令即可部署到 <a href="http://pages.github.com/">GitHub Pages</a> 和 <a href="http://heroku.com/">Heroku</a></li><li>已移植 <a href="http://octopress.org/">Octopress</a> 插件</li><li>高扩展性、自订性</li><li>兼容于 Windows, Mac &amp; Linux</li></ul><p>首先在电脑中创建一个存放Hexo的文件夹</p><p>在该路径中打开cmd窗口</p><p>利用刚刚安装好的Node.js和npm安装Hexo</p><ol><li><p>输入npm install hexo-cli -g, 安装Hexo脚手架, 如果报错</p><p>则输入 npm install hexo-cli -g –force</p></li><li><p>输入hexo -v验证是否安装成功</p></li><li><p>输入hexo init, 初始化该文件夹的Hexo环境</p></li><li><p>输入npm install安装所需要的组件</p></li><li><p>输入npm g生成搭建博客需要的静态文件</p></li><li><p>输入npm s启动本地服务器, 启动成功后, 在浏览器中输入localhost:4000即可访问最原始的博客网站了</p><div class="note info">            <p>如果4000端口号被占用, 可以在_config.yml文件内加以下代码</p><p>server:</p><p>​    port: 4001(任意没被占用的端口号)</p><p>​    conpress: true</p><p>​    header: true</p>          </div></li></ol><h1 id="Hexo静态文件作用"><a href="#Hexo静态文件作用" class="headerlink" title="Hexo静态文件作用"></a>Hexo静态文件作用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;_config.yml：网站的全局配置文件，设置包括网站标题、副标题、作者、关键字和描述信息等。</span><br><span class="line"></span><br><span class="line">&gt;package.json：框架的基本参数信息和它所依赖的插件，在 npm 安装时使用 --save 保存进去。</span><br><span class="line"></span><br><span class="line">&gt;scaffolds：本意是 “脚手架” 的意思，这里引申为模板文件夹。当你 hexo new &lt;layout(布局)&gt; &lt;title&gt; 的时候，Hexo 会根据该文件夹下的对应文件进行初始化构建。</span><br><span class="line"></span><br><span class="line">&gt;source：正如其名，source 文件夹存储一些直接来自用户的文件，它很重要，如果不出意外你的文章就是保存在这个文件夹下(_posts)。_posts 目录下的md文件，会被编译成 html 文件，放到 public 文件下。</span><br><span class="line"></span><br><span class="line">&gt;public：参考 source 文件夹，在初始化后是没有 public 文件夹的，除非 hexo g 编译生成静态文件后，public 文件夹会自动生成。使用 </span><br><span class="line">&gt;hexo clean 清除 db.json 和 public 文件夹下的所有文件。</span><br><span class="line"></span><br><span class="line">&gt;themes：主题文件夹，存储主题。相关的主题可以在 Github 上免费采购。</span><br><span class="line"></span><br><span class="line">&gt;.gitignore：.gitignore 文件作用是声明不被 git 记录的文件，hexo init &lt;folder&gt; 也会产生一个 .gitignore 文件，可以先删除或者直接编辑，对hexo不会有影响。</span><br></pre></td></tr></table></figure><p><strong>打开配置文档_config.yml，修改deploy值（在末尾）:</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:nopoetry/nopoetry.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>输入 npm install hexo-deployer-git –save  , 安装hexo上传到git的扩展工具</p><p>在博客文件夹的根目录下(也就是最开始你创建并安装Hexo的那个文件夹下), 打开cmd窗口或git bash窗口</p><p>打开后输入hexo new post “博客名”</p><p>这时文件夹source/_posts文件夹里会出现<strong>博客名.md</strong>的博客文章源文件</p><p>文件是<strong>markdown</strong>格式, 如果不想学习格式书写规范的话, 直接下载<strong>Typora</strong>这个软件就好了</p><p>如果使用Typora编辑工具, 在Typora写好博客内容后将文件复制粘贴到<strong>source/_posts</strong>文件夹下即可</p><p>编辑好博客内容后, 依次执行</p><p>hexo g 生成静态文件<br>hexo d 部署到Github Pages </p><p>完成后, 等待一段时间, 刷新博客网站即可看到自己的博客</p><h1 id="更换博客主题"><a href="#更换博客主题" class="headerlink" title="更换博客主题"></a>更换博客主题</h1><p>当然, 默认的博客主题着实是丑了点, 我们还可以在 <a href="https://hexo.io/themes/">Hexo官网</a> 上挑选好看的主题使用</p><p>一般来说被挑选为Hexo推荐的主题博客, 里边都会有对于该主题如何使用的教程</p><p>比如我们选择了<a href="https://demo.jerryc.me/">butterfly主题</a></p><p>在博客的根目录下打开cmd或git bash, 输入</p><p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/butterfly</p><p>clone完成后, 会保存在你博客目录的theme文件夹下, </p><p><img src="https://i.loli.net/2020/08/02/XSuxBhfZJAWPcjp.png" alt="post_4.png"></p><p>其中<strong>_config.yml</strong>就是该主题的配置文件, 我们可以根据主题的使用教程对该主题进行个性化配置</p><p>之后在<strong>博客的根目录</strong>下找到打开博客的配置文件<strong>_config.yml</strong></p><div class="note info">            <p>注意跟主题的配置文件进行区分</p>          </div><p>修改theme: landscape为</p><p>theme: butterfly</p><p>然后打开cmd或git bash 窗口, 清除之前的文件并重新生成和部署, 即可完成主题的切换</p><p>hexo clean(最好在每次上传博客或切换主题的 时候都clean一下)</p><p>hexo g</p><p>hexo d</p><p>如果完成上述操作之后, 打开博客网站只显示  </p><p>extends includes/layout.pug block content include includes/recent-posts.pug include includes/partial </p><p>那么执行如下命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p>执行完成之后再重新执行上述三条命令即可</p>]]></content>
    
    <summary type="html">
    
      使用github 和 Hexo 搭建不需要服务器和域名的博客网站
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="搭建博客教程" scheme="http://yoursite.com/categories/Hexo/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly 主题页面配置</title>
    <link href="http://yoursite.com/2020/08/01/Butterfly-%E4%B8%BB%E9%A2%98%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/08/01/Butterfly-%E4%B8%BB%E9%A2%98%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/</id>
    <published>2020-08-01T13:34:00.000Z</published>
    <updated>2020-08-02T03:23:59.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h1><h2 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h2><div class="note info">            <p>如果标注可选的参数，可根据自己需要添加，不用全部都写在 markdown 里</p>          </div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer：</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink：</span><br><span class="line">---</span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面创建日期</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标籤、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块 (默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)</td></tr></tbody></table><h2 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments：</span></span><br><span class="line"><span class="emphasis">cover:  </span></span><br><span class="line"><span class="emphasis">toc:  </span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">auto<span class="emphasis">_open:</span></span><br><span class="line"><span class="emphasis">copyright:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author:</span><br><span class="line">copyright<span class="emphasis">_author_</span>href:</span><br><span class="line">copyright<span class="emphasis">_url:</span></span><br><span class="line"><span class="emphasis">copyright_</span>info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer：</span><br><span class="line">highlight<span class="emphasis">_shrink：</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标籤</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图 (如果没有设置 top_img, 文章页顶部将显示缩略图，可设为 false / 图片地址 / 留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块 (默认 true)</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块 (默认为设置中 post_copyright 的 enable 配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)</td></tr></tbody></table><h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><div class="note default">            <p>default 提示块标籤</p>          </div><div class="note primary no-icon">            <p>primary 提示块标籤</p>          </div><div class="note success">            <p>success 提示块标籤</p>          </div><div class="note info">            <p>info 提示块标籤</p>          </div><div class="note warning">            <p>warning 提示块标籤</p>          </div><div class="note danger">            <p>danger 提示块标籤</p>          </div><h1 id="顶部图"><a href="#顶部图" class="headerlink" title="顶部图"></a>顶部图</h1><p>顶部图有 2 种配置：具体 url 和（留空，true 和 false，三个效果一样）</p><h2 id="page页"><a href="#page页" class="headerlink" title="page页"></a>page页</h2><h3 id="当具体url时"><a href="#当具体url时" class="headerlink" title="当具体url时"></a>当具体url时</h3><p>主页的顶部图可以在 Butterfly.yml 设置 index_img</p><p>archives 页的顶部图可以在 Butterfly.yml 设置 archive_img</p><p>其他 page 页的顶部图可以在各自的 md 页面设置 front-matter 中的 top_img</p><div class="note info">            <p>页面如果没有设置各自的 top_img，则会显示 default_top_img 图片</p>          </div><h3 id="当顶部图留空，true-和-false"><a href="#当顶部图留空，true-和-false" class="headerlink" title="当顶部图留空，true 和 false"></a>当顶部图留空，true 和 false</h3><p>主页会显示纯颜色的顶部图</p><p>其他 page 的顶部图没有设置时，也会显示纯颜色的顶部图</p><h2 id="post页"><a href="#post页" class="headerlink" title="post页"></a>post页</h2><p>post 页的顶部图会优先显示各自 front-matter 中的 top_img, 如果没有设置，则会缩略图（即各自 front-matter 中的 cover)，如果没有则会显示显示 default_top_img 图片</p><h1 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h1><p>要为文章置顶，你需要安装插件 (hexo-generator-index-pin-top 或者 hexo-generator-indexed)</p><p>如果使用 hexo-generator-index-pin-top, 需要先卸载掉 hexo-generator-index，然后在文章的 front-matter 区域里添加 top: true 属性来把这篇文章置顶</p><p>如果使用 hexo-generator-indexed, 需要先卸载掉 hexo-generator-index，然后在文章的 front-matter 区域里添加 sticky: 1 属性来把这篇文章置顶。数值越大，置顶的优先级越大</p><h1 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h1><p>文章的 markdown 文档上，在 Front-matter 添加 cover, 并填上要显示的图片地址。<br>如果不配置 cover, 可以设置显示默认的 cover.</p><p>如果不想在首页显示 cover, 可以设置为 false</p><p>配置 butterfly.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 是否显示文章封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 封面显示的位置</span></span><br><span class="line">  <span class="comment"># 三个值可配置 left , right , both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># 当没有设置cover时，默认的封面显示</span></span><br><span class="line">  <span class="attr">default_cover:</span> </span><br></pre></td></tr></table></figure><p>当配置多张图片时，会随机选择一张作为 cover. 此时写法应为</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">default_cover:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg2.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg3.png</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      主题页面相关配置
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="Buttefly" scheme="http://yoursite.com/categories/Hexo/Buttefly/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="主题" scheme="http://yoursite.com/tags/%E4%B8%BB%E9%A2%98/"/>
    
      <category term="Butterfly" scheme="http://yoursite.com/tags/Butterfly/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/08/01/hello-world/"/>
    <id>http://yoursite.com/2020/08/01/hello-world/</id>
    <published>2020-08-01T12:36:47.052Z</published>
    <updated>2020-08-01T12:36:47.052Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
